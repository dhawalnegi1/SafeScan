{
  "version": 4,
  "terraform_version": "1.9.8",
  "serial": 18,
  "lineage": "a34dc80b-318e-c82a-4b60-b7102ae76f34",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "cloudflare_worker_route",
      "name": "route",
      "provider": "provider[\"registry.terraform.io/cloudflare/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "3e8b7158fde3467fb1c8c9f224b1c22d",
            "pattern": "isitbadforme.tech/*",
            "script_name": "aws-proxy-worker",
            "zone_id": "f3c7722c70d584766b9896a0eff82dd5"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "cloudflare_worker_script.proxy_worker"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "cloudflare_worker_script",
      "name": "proxy_worker",
      "provider": "provider[\"registry.terraform.io/cloudflare/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": null,
            "analytics_engine_binding": [],
            "content": "addEventListener('fetch', event =\u003e {\n    event.respondWith(handleRequest(event.request))\n  })\n  \n  async function handleRequest(request) {\n    try {\n      // URL of your EC2 instance\n      const ec2Url = 'http://ec2.isitbadforme.tech';\n  \n      // Create a new request with the EC2 URL\n      const newRequest = new Request(ec2Url + new URL(request.url).pathname, {\n        method: request.method,\n        headers: new Headers({\n          ...Object.fromEntries(request.headers),\n          'Host': 'isitbadforme.tech'\n        }),\n        body: request.body\n      });\n  \n      // Log the new request details\n      console.log('New request:', newRequest);\n  \n      // Fetch the response from the EC2 instance\n      const response = await fetch(newRequest);\n  \n      // Log the response details\n      console.log('Response status:', response.status);\n      console.log('Response headers:', [...response.headers]);\n  \n      // Check if the response is a WebSocket upgrade\n      if (response.status === 101) {\n        return response;\n      }\n  \n      // Return the response to the client\n      return response;\n    } catch (error) {\n      // Log the error and return a custom error response\n      console.error('Error in worker script:', error);\n      return new Response('Internal Server Error', { status: 500 });\n    }\n  }",
            "id": "aws-proxy-worker",
            "kv_namespace_binding": [],
            "module": null,
            "name": "aws-proxy-worker",
            "plain_text_binding": [],
            "queue_binding": [],
            "r2_bucket_binding": [],
            "secret_text_binding": [],
            "service_binding": [],
            "webassembly_binding": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    }
  ],
  "check_results": null
}
